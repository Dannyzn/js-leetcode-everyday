// 在一条环路上有 n 个加油站，其中第 i 个加油站有汽油 gas[i] 升。

// 你有一辆油箱容量无限的的汽车，从第 i 个加油站开往第 i+1 个加油站需要消耗汽油 cost[i] 升。你从其中的一个加油站出发，开始时油箱为空。

// 给定两个整数数组 gas 和 cost ，如果你可以绕环路行驶一周，则返回出发时加油站的编号，否则返回 -1 。如果存在解，则 保证 它是 唯一 的。


// 示例1: 

// 输入: gas = [1,2,3,4,5], cost = [3,4,5,1,2]
// 输出: 3
// 解释:
// 从 3 号加油站(索引为 3 处)出发，可获得 4 升汽油。此时油箱有 = 0 + 4 = 4 升汽油
// 开往 4 号加油站，此时油箱有 4 - 1 + 5 = 8 升汽油
// 开往 0 号加油站，此时油箱有 8 - 2 + 1 = 7 升汽油
// 开往 1 号加油站，此时油箱有 7 - 3 + 2 = 6 升汽油
// 开往 2 号加油站，此时油箱有 6 - 4 + 3 = 5 升汽油
// 开往 3 号加油站，你需要消耗 5 升汽油，正好足够你返回到 3 号加油站。
// 因此，3 可为起始索引。


// 目前会拆解为暴力, 贪心(其实是从全局最优的角度去考虑问题)

// 类似于 贪心

// 大致会分为三种情况
// 情况1: 如果 gas 总和小于 cost 总和, 那么无论从哪里出发 一定是跑不了一圈的

// 情况2: rest[i] = gas[i] - cost[i] 为一天剩下的油,从 0 开始计算累加到最后一站, 如果累加没有出现负数
//       说明 从0 出发, 有就没有断过 那么 0 就是起点
// 情况3: 如果累加的最小值是负数  汽车就要从非 0 节点开始 从后向前 看哪个节点 能把这个负数 填平  能填平的就是 出发节点

var canCompleteCircuit = function(gas, cost) {
    let curSum = 0;
    let min = Number.MIN_VALUE;

    for(let i = 0; i < cost.length; i++) {
        let rest = gas[i] - cost[i];
        curSum += rest;
        if (curSum < min) {
            min = curSum;
        }
    }

    // 1
    if (curSum < 0)  return -1;
    // 2
    if (min >= 0) return 0;
    // 3
    for (let i = cost.length-1; i>=0; i--) {
        let rest = gas[i] - cost[i];
        min += rest;
        if (min >= 0) {
            return i;
        }
    }
    return -1;
}